[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "py-txt-trnsfrm"
version = "0.1.0"
description = "A Flask web application for creative text transformations inspired by 90s internet culture"
authors = [
    {name = "Amir Masri", email = "masriamir@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Framework :: Flask",
]
dependencies = [
    "flask>=3.1.1",
    "gunicorn>=23.0.0",
    "python-dotenv==1.1.1",
    "werkzeug>=3.1.3",
]

[dependency-groups]
# Development tools for code formatting, linting, and type checking
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pydocstyle>=6.3.0",
    # Type stub packages for mypy
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "types-psutil>=5.9.0",
]

# Testing framework and related plugins
test = [
    "pytest>=8.4.1",
    "pytest-flask>=1.3.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.8.0",
    "coverage>=7.3.0",
    # Test data generation and property-based testing
    "faker>=37.5.3",
    "hypothesis>=6.137.1",
    "pytest-datadir>=1.8.0",
    "pytest-httpserver>=1.1.3",
    "responses>=0.25.8",
    "pytest-benchmark>=5.1.0",
]

# Security analysis and vulnerability scanning
security = [
    "bandit>=1.8.6",
    "safety>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/masriamir/py-txt-trnsfrm"
Repository = "https://github.com/masriamir/py-txt-trnsfrm"

[project.scripts]
py-txt-trnsfrm = "app:main"

# Configure hatchling to include the app package
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Include additional files
[tool.hatch.build.targets.wheel.sources]
"app" = "app"
"app.py" = "app.py"

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["app"]

[tool.ruff.lint]
select = [
#    "ANN",  # flake8-annotations
    "S",  # flake8-bandit
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
#    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
#    "DTZ",  # flake8-datetimez
#    "INT",  # flake8-gettext
#    "ISC",  # flake8-implicit-str-concat
#    "ICN",  # flake8-import-conventions
#    "LOG",  # flake8-logging
#    "G",  # flake8-logging-format
    "T20",  # flake8-print
#    "PYI",  # flake8-pyi
#    "PT",  # flake8-pytest-style
#    "Q",  # flake8-quotes
#    "RET",  # flake8-return
#    "SLF",  # flake8-self
#    "SIM",  # flake8-simplify
#    "TC",  # flake8-type-checking
#    "ARG",  # flake8-unused-arguments
#    "PTH",  # flake8-use-pathlib
    "I",  # isort
    "C90",  # mccabe
    "N",  # pep8-naming
    "E",  # pycodestyle-error
    "W",  # pycodestyle-warning
#    "DOC",  # pydoclint
#    "D",  # pydocstyle
    "F",  # Pyflakes
#    "PL",  # Pylint
    "UP",  # pyupgrade
#    "RUF"  # Ruff-specific rules
]
ignore = ["E501"]  # Line too long

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",  # assert statements
    "S105",  # hardcoded password
    "S603",  # subprocess call with untrusted input
    "S607",  # subprocess call with a partial executable path
    "T201"  # print statements in tests
]
"tests/test_config.py" = ["S104"]
"tests/test_gunicorn_config.py" = ["S102", "S108"]
"tests/test_host_binding.py" = ["S104"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "venv/*", ".venv/*"]
data_file = "reports/coverage/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.coverage.html]
directory = "reports/coverage/html"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.uv.pip]
python-version = "3.13"
