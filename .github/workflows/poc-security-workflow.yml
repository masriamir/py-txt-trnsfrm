name: POC Security Analysis - Trivy + Semgrep

on:
  workflow_dispatch: # Manual trigger for testing
  push:
    branches: [main, develop]
    paths:
      - 'app/**'
      - 'Dockerfile'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'uv.lock'

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: ">=0.8.11,<0.9.0"

jobs:
  poc-security-scan:
    name: POC Security Analysis (Trivy + Semgrep)
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # For uploading SARIF results
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --frozen --group dev --group test --group security

    - name: Create reports directory
      run: mkdir -p reports/security/poc

    # Trivy Security Scanner
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'reports/security/poc/trivy-results.sarif'
        exit-code: '0'  # Don't fail CI on vulnerabilities

    - name: Run Trivy JSON report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'reports/security/poc/trivy-results.json'
        exit-code: '0'

    # Semgrep Security Scanner  
    - name: Run Semgrep with Community Rulesets
      uses: semgrep/semgrep-action@v1
      with:
        config: >
          p/flask,p/nginx,p/xss,p/python,p/bandit,p/docker,p/secrets,p/comment,p/javascript,p/r2c-bug-scan,p/owasp-top-ten,p/github-actions,p/security-audit,p/docker-compose,p/semgrep-rule-ci,p/secure-defaults,p/security-headers,p/command-injection,p/insecure-transport,p/r2c-best-practices,p/r2c-security-audit,p/semgrep-rule-lints,p/semgrep-misconfigurations
        generateSarif: "1"
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true  # Don't fail if token not available

    - name: Run Semgrep (fallback local rules)
      if: failure() # Run if previous step failed
      run: |
        # Install semgrep if not available
        if ! command -v semgrep &> /dev/null; then
          pip install semgrep
        fi
        
        # Try community rulesets first, then fallback to local rules
        echo "Attempting community rulesets..."
        if ! semgrep --config=p/flask,p/nginx,p/xss,p/python,p/bandit,p/docker,p/secrets,p/comment,p/javascript,p/r2c-bug-scan,p/owasp-top-ten,p/github-actions,p/security-audit,p/docker-compose,p/semgrep-rule-ci,p/secure-defaults,p/security-headers,p/command-injection,p/insecure-transport,p/r2c-best-practices,p/r2c-security-audit,p/semgrep-rule-lints,p/semgrep-misconfigurations --json --output=reports/security/poc/semgrep-results.json . 2>/dev/null; then
          echo "Community rulesets failed, using local rules..."
          # Use the permanent Semgrep configuration from the repository
          semgrep --config=docs/security/semgrep-rules.yaml --json --output=reports/security/poc/semgrep-results.json .
        fi
        
        # Generate SARIF output
        if ! semgrep --config=p/flask,p/nginx,p/xss,p/python,p/bandit,p/docker,p/secrets,p/comment,p/javascript,p/r2c-bug-scan,p/owasp-top-ten,p/github-actions,p/security-audit,p/docker-compose,p/semgrep-rule-ci,p/secure-defaults,p/security-headers,p/command-injection,p/insecure-transport,p/r2c-best-practices,p/r2c-security-audit,p/semgrep-rule-lints,p/semgrep-misconfigurations --sarif --output=reports/security/poc/semgrep-results.sarif . 2>/dev/null; then
          echo "Community rulesets SARIF failed, using local rules..."
          semgrep --config=docs/security/semgrep-rules.yaml --sarif --output=reports/security/poc/semgrep-results.sarif . || echo "SARIF generation failed"
        fi

    # Upload SARIF results to GitHub Security tab
    - name: Upload Trivy SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'reports/security/poc/trivy-results.sarif'
        category: 'trivy'

    - name: Upload Semgrep SARIF to GitHub Security tab  
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'reports/security/poc/semgrep-results.sarif'
        category: 'semgrep'

    # Performance analysis and reporting
    - name: Analyze scan performance
      run: |
        echo "## POC Security Scan Results" > reports/security/poc/github_summary.md
        echo "" >> reports/security/poc/github_summary.md
        
        # Count findings
        if [ -f "reports/security/poc/trivy-results.json" ]; then
          TRIVY_FINDINGS=$(jq '[.Results[]?.Vulnerabilities // empty] | length' reports/security/poc/trivy-results.json 2>/dev/null || echo "0")
          echo "- **Trivy findings:** $TRIVY_FINDINGS" >> reports/security/poc/github_summary.md
        fi
        
        if [ -f "reports/security/poc/semgrep-results.json" ]; then
          SEMGREP_FINDINGS=$(jq '.results | length' reports/security/poc/semgrep-results.json 2>/dev/null || echo "0") 
          echo "- **Semgrep findings:** $SEMGREP_FINDINGS" >> reports/security/poc/github_summary.md
        fi
        
        echo "" >> reports/security/poc/github_summary.md
        echo "### Tool Information" >> reports/security/poc/github_summary.md
        echo "- **Trivy**: $(trivy --version 2>/dev/null | head -1 || echo 'Installed via GitHub Action')" >> reports/security/poc/github_summary.md
        echo "- **Semgrep**: $(semgrep --version 2>/dev/null || echo 'Installed via GitHub Action')" >> reports/security/poc/github_summary.md
        echo "" >> reports/security/poc/github_summary.md
        echo "SARIF reports uploaded to GitHub Security tab for detailed analysis." >> reports/security/poc/github_summary.md

    - name: Upload POC reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: poc-security-reports-${{ github.run_number }}
        path: |
          reports/security/poc/
        retention-days: 30

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('reports/security/poc/github_summary.md')) {
            const summary = fs.readFileSync('reports/security/poc/github_summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

    # Comparison with current tools (if available)
    - name: Run current security tools for comparison
      run: |
        echo "## Comparison with Current Tools" > reports/security/poc/comparison.md
        echo "" >> reports/security/poc/comparison.md
        
        # Run current Bandit
        if command -v bandit &> /dev/null; then
          echo "### Bandit Results" >> reports/security/poc/comparison.md
          uv run bandit -r app/ -f json -o reports/security/poc/bandit_comparison.json || true
          BANDIT_ISSUES=$(jq '.results | length' reports/security/poc/bandit_comparison.json 2>/dev/null || echo "0")
          echo "- **Bandit findings:** $BANDIT_ISSUES" >> reports/security/poc/comparison.md
        fi
        
        # Run current Safety  
        if command -v safety &> /dev/null; then
          echo "### Safety Results" >> reports/security/poc/comparison.md
          uv run safety scan --json --output reports/security/poc/safety_comparison.json || true
          echo "- **Safety scan:** Attempted (results may vary due to auth requirements)" >> reports/security/poc/comparison.md
        fi