name: Comprehensive CI Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: ">=0.8.11,<0.9.0"

jobs:
  # Code Quality Job - Fast failure for quality issues
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=uv-${{ runner.os }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}" >> $GITHUB_OUTPUT

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          uv-${{ runner.os }}-
          uv-

    - name: Install dependencies
      run: uv sync --frozen --group dev --group test --group security

    - name: Run ruff linting
      run: |
        echo "::group::Ruff Linting"
        uv run ruff check . --output-format=github
        echo "::endgroup::"

    - name: Run ruff formatting check
      run: |
        echo "::group::Ruff Format Check"
        uv run ruff format --check .
        echo "::endgroup::"

    - name: Run black formatting check
      run: |
        echo "::group::Black Format Check"
        uv run black --check --diff .
        echo "::endgroup::"

    - name: Run mypy type checking
      run: |
        echo "::group::MyPy Type Checking"
        uv run mypy app/ --show-error-codes --pretty
        echo "::endgroup::"

  # Testing Job Matrix - Parallel execution for different test types
  testing:
    name: Testing (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration', 'api', 'smoke']
        # Note: 'slow' and 'security' tests excluded from main CI

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ needs.code-quality.outputs.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-
          uv-

    - name: Install dependencies
      run: uv sync --frozen --group dev --group test --group security

    - name: Create reports directory
      run: mkdir -p reports/coverage

    - name: Run ${{ matrix.test-type }} tests
      run: |
        uv run pytest \
          -m ${{ matrix.test-type }} \
          --tb=short \
          --cov=app \
          --cov-report=xml:reports/coverage/coverage-${{ matrix.test-type }}.xml \
          --cov-report=html:reports/coverage/html-${{ matrix.test-type }} \
          --cov-report=term \
          --junitxml=reports/pytest-${{ matrix.test-type }}.xml \
          --maxfail=5 \
          --durations=10

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          reports/pytest-${{ matrix.test-type }}.xml
          reports/coverage/coverage-${{ matrix.test-type }}.xml
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./reports/coverage/coverage-${{ matrix.test-type }}.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.test-type }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Security Analysis Job - Parallel with testing
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      security-events: write  # For uploading SARIF results

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        version: ${{ env.UV_VERSION }}

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ needs.code-quality.outputs.cache-key }}
        restore-keys: |
          uv-${{ runner.os }}-
          uv-

    - name: Install dependencies
      run: uv sync --frozen --group dev --group test --group security

    - name: Install jq for report processing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Run security analysis
      run: |
        echo "::group::Security Analysis"
        chmod +x ./run_security_analysis.sh
        ./run_security_analysis.sh
        echo "::endgroup::"

    - name: Process security results
      run: |
        echo "::group::Security Results Summary"
        if [ -f "reports/security/security_summary.txt" ]; then
          cat reports/security/security_summary.txt
        fi
        echo "::endgroup::"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          reports/security/
        retention-days: 30

    - name: Check for critical security issues
      run: |
        # Fail CI if critical security issues are found
        if [ -f "reports/security/bandit_report.json" ]; then
          HIGH_ISSUES=$(jq '.results | map(select(.issue_confidence == "HIGH" and .issue_severity == "HIGH")) | length' reports/security/bandit_report.json 2>/dev/null || echo "0")
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "::error::Found $HIGH_ISSUES high-severity security issues"
            exit 1
          fi
        fi

  # Aggregate Results Job
  aggregate-results:
    name: Aggregate Results
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security-analysis]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Testing: ${{ needs.testing.result }}"
        echo "Security Analysis: ${{ needs.security-analysis.result }}"

        # Determine overall status
        if [[ "${{ needs.code-quality.result }}" == "success" &&
              "${{ needs.testing.result }}" == "success" &&
              ("${{ needs.security-analysis.result }}" == "success" || "${{ needs.security-analysis.result }}" == "failure") ]]; then
          echo "✅ CI Pipeline completed successfully!"
          exit 0
        else
          echo "❌ CI Pipeline failed"
          exit 1
        fi
